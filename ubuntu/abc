#ifndef AVLTREE_H
#define AVLTREE_H

#include <string>
#include <vector>
#include <fstream>
#include <iostream>
#include <algorithm>

// WordNode class
class WordNode {
public:
    std::string word;
    std::string meaning;

    WordNode(const std::string& w, const std::string& m) {
        if (w.empty()) throw std::invalid_argument("Word cannot be empty");
        word = w;
        meaning = m;
    }

    bool isEmpty() const {
        return word.empty() || meaning.empty();
    }
};

// AVLTree class
class AVLTree {
protected:
    struct Node {
        WordNode data;
        Node* left;
        Node* right;
        int height;

        Node(const WordNode& wordData) : data(wordData), left(nullptr), right(nullptr), height(1) {}
    };

    Node* root;

    // Helper functions
    int getHeight(Node* node);
    int getBalanceFactor(Node* node);
    Node* rotateRight(Node* y);
    Node* rotateLeft(Node* x);
    Node* insert(Node* node, const WordNode& data);
    Node* findMinValueNode(Node* node);
    Node* deleteNode(Node* root, const std::string& word);
    void inorderDisplay(Node* node) const;
    void saveToFileRecursive(Node* node, std::ofstream& outputFile) const;
    void inorderWords(Node* node, std::vector<std::string>& words) const;

public:
    AVLTree() : root(nullptr) {}

    void insert(const WordNode& data);
    void deleteWord(const std::string& word);
    void display() const;
    void saveToFile(std::ofstream& outputFile) const;
    void searchWord(const std::string& word) const;
    std::vector<std::string> getAllWords() const;
};

#endif


#include "AVLTree.h"

// Helper function to get the height of a node
int AVLTree::getHeight(Node* node) {
    return node == nullptr ? 0 : node->height;
}

// Helper function to get the balance factor of a node
int AVLTree::getBalanceFactor(Node* node) {
    return node == nullptr ? 0 : getHeight(node->left) - getHeight(node->right);
}

// Rotate right (for left-heavy trees)
AVLTree::Node* AVLTree::rotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = std::max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = std::max(getHeight(x->left), getHeight(x->right)) + 1;

    return x;
}

// Rotate left (for right-heavy trees)
AVLTree::Node* AVLTree::rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = std::max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = std::max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

// Insert function with balancing logic
AVLTree::Node* AVLTree::insert(Node* node, const WordNode& data) {
    if (node == nullptr) return new Node(data);

    if (data.word < node->data.word)
        node->left = insert(node->left, data);
    else if (data.word > node->data.word)
        node->right = insert(node->right, data);
    else
        return node;  // Duplicate words are not allowed

    node->height = 1 + std::max(getHeight(node->left), getHeight(node->right));

    int balance = getBalanceFactor(node);

    if (balance > 1 && data.word < node->left->data.word)
        return rotateRight(node);

    if (balance < -1 && data.word > node->right->data.word)
        return rotateLeft(node);

    if (balance > 1 && data.word > node->left->data.word) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }

    if (balance < -1 && data.word < node->right->data.word) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }

    return node;
}

// Find the node with the minimum value
AVLTree::Node* AVLTree::findMinValueNode(Node* node) {
    Node* current = node;
    while (current && current->left != nullptr)
        current = current->left;
    return current;
}

// Delete a word from the AVL tree
AVLTree::Node* AVLTree::deleteNode(Node* root, const std::string& word) {
    if (root == nullptr) return root;

    if (word < root->data.word)
        root->left = deleteNode(root->left, word);
    else if (word > root->data.word)
        root->right = deleteNode(root->right, word);
    else {
        if ((root->left == nullptr) || (root->right == nullptr)) {
            Node* temp = root->left ? root->left : root->right;

            if (temp == nullptr) {
                temp = root;
                root = nullptr;
            } else *root = *temp;

            delete temp;
        } else {
            Node* temp = findMinValueNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data.word);
        }
    }

    if (root == nullptr) return root;

    root->height = 1 + std::max(getHeight(root->left), getHeight(root->right));

    int balance = getBalanceFactor(root);

    if (balance > 1 && getBalanceFactor(root->left) >= 0)
        return rotateRight(root);

    if (balance > 1 && getBalanceFactor(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }

    if (balance < -1 && getBalanceFactor(root->right) <= 0)
        return rotateLeft(root);

    if (balance < -1 && getBalanceFactor(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

// Display all words in the dictionary (in-order traversal)
void AVLTree::inorderDisplay(Node* node) const {
    if (node != nullptr) {
        inorderDisplay(node->left);
        std::cout << node->data.word << ": " << node->data.meaning << std::endl;
        inorderDisplay(node->right);
    }
}

void AVLTree::saveToFileRecursive(Node* node, std::ofstream& outputFile) const {
    if (node != nullptr) {
        outputFile << node->data.word << std::endl;
        outputFile << node->data.meaning << std::endl;
        saveToFileRecursive(node->left, outputFile);
        saveToFileRecursive(node->right, outputFile);
    }
}

void AVLTree::inorderWords(Node* node, std::vector<std::string>& words) const {
    if (node != nullptr) {
        inorderWords(node->left, words);
        words.push_back(node->data.word);
        inorderWords(node->right, words);
    }
}

void AVLTree::insert(const WordNode& data) {
    root = insert(root, data);
}

void AVLTree::deleteWord(const std::string& word) {
    root = deleteNode(root, word);
}

void AVLTree::display() const {
    inorderDisplay(root);
}

void AVLTree::saveToFile(std::ofstream& outputFile) const {
    if (outputFile.is_open()) {
        saveToFileRecursive(root, outputFile);
    } else {
        std::cerr << "Error saving dictionary to file.\n";
    }
}

void AVLTree::searchWord(const std::string& word) const {
    Node* current = root;
    while (current != nullptr) {
        if (word == current->data.word) {
            std::cout << "Found: " << current->data.word << " - " << current->data.meaning << std::endl;
            return;
        } else if (word < current->data.word) {
            current = current->left;
        } else {
            current = current->right;
        }
    }
    std::cout << "Word not found.\n";
}

std::vector<std::string> AVLTree::getAllWords() const {
    std::vector<std::string> words;
    inorderWords(root, words);
    return words;
}


#ifndef ADMINAPP_H
#define ADMINAPP_H

#include "AVLTree.h"

class AdminApp : public AVLTree {
private:
    void loadFromFile(const std::string& filename);
    void saveToFile(const std::string& filename);
    void addWord();
    void deleteWordAction();
    void displayWords() const;

public:
    void run();
};

#endif


#include "AdminApp.h"
#include <fstream>

void AdminApp::loadFromFile(const std::string& filename) {
    std::ifstream inputFile(filename);
    if (inputFile.is_open()) {
        std::string word, meaning;
        while (getline(inputFile, word) && getline(inputFile, meaning)) {
            insert(WordNode(word, meaning));
        }
        inputFile.close();
    }
}

void AdminApp::saveToFile(const std::string& filename) {
    std::ofstream outputFile(filename);
    if (outputFile.is_open()) {
        saveToFile(outputFile);
        outputFile.close();
    } else {
        std::cerr << "Error saving file.\n";
    }
}

void AdminApp::addWord() {
    std::string word, meaning;
    std::cout << "Enter word: ";
    std::getline(std::cin, word);
    std::cout << "Enter meaning: ";
    std::getline(std::cin, meaning);

    try {
        insert(WordNode(word, meaning));
        std::cout << "Word added successfully.\n";
    } catch (const std::invalid_argument& e) {
        std::cout << e.what() << "\n";
    }
}

void AdminApp::deleteWordAction() {
    std::string word;
    std::cout << "Enter word to delete: ";
    std::getline(std::cin, word);
    deleteWord(word);
    std::cout << "Word deleted successfully (if it existed).\n";
}

void AdminApp::displayWords() const {
    std::cout << "All words in the dictionary:\n";
    display();
}

void AdminApp::run() {
    int choice;
    do {
        std::cout << "\nAdmin Menu:\n
